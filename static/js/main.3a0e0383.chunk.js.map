{"version":3,"sources":["components/TopNav.tsx","components/RightNav.tsx","components/Accordion.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TopNav","useState","isOpen","setIsOpen","Navbar","style","background","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","RightNav","vertical","carddata","index","data","Title","this","Accordion","props","toggle","bind","state","collapse","cards","e","event","target","dataset","setState","Number","map","Card","marginBottom","key","CardHeader","data-event","CardBody","Component","Footer","React","App","isActive","Jumbotron","padding","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yXA2DeA,EA3CA,WAAO,IAAD,EACSC,oBAAS,GADlB,mBACZC,EADY,KACJC,EADI,KAKnB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAO,CAACC,WAAW,sBAAuBC,MAAM,QAAQC,OAAK,EAACC,OAAO,MAC3E,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,cACA,kBAACC,EAAA,EAAD,CAAeC,QANN,kBAAMV,GAAWD,MAO1B,kBAACY,EAAA,EAAD,CAAUZ,OAAQA,EAAQa,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,gBAAd,iBAEF,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,eAAd,oBAEF,kBAACS,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,oBAGA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAACC,EAAA,EAAD,2BAGA,kBAACA,EAAA,EAAD,4BAGA,kBAACA,EAAA,EAAD,CAAcC,SAAO,IACrB,kBAACD,EAAA,EAAD,iBAMN,kBAACR,EAAA,EAAD,CAASR,KAAK,4CAAd,cC3BKkB,EAtBE,WACf,OACE,yBAAKxB,MAAO,CAACC,WAAW,YACtB,0CACA,kBAACU,EAAA,EAAD,CAAKc,UAAQ,GACX,kBAACZ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,KAAd,uBAEF,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,KAAd,mBAEF,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,KAAd,iBAIJ,+B,gCCTAoB,EAIF,WAAYC,EAAcC,EAAaC,GAAc,yBAHrDF,MAAe,EAGqC,KAFpDC,KAAa,GAEuC,KADpDC,MAAa,GAETC,KAAKH,MAAQA,EACbG,KAAKF,KAAOA,EACZE,KAAKD,MAAQA,GA8CNE,E,kDAzCb,WAAYC,GAAc,IAAD,8BAErB,cAAMA,IACDC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,MAAQ,CACTC,SAAW,EACVC,MAAM,CACF,IAAIX,EAAS,EAAE,kiBAAkiB,YACjjB,IAAIA,EAAS,EAAE,sXAAsX,cACrY,IAAIA,EAAS,EAAE,4YAAmX,kBAClY,IAAIA,EAAS,EAAE,+EAA+E,kBAVlF,E,mDAchBY,GACL,IAAIC,EAAQD,EAAEE,OAAOC,QAAQF,MAC7BT,KAAKY,SAAS,CAAEN,SAAUN,KAAKK,MAAMC,WAAaO,OAAOJ,GAAS,EAAII,OAAOJ,O,+BAErE,IAAD,SACqBT,KAAKK,MAA1BE,EADA,EACAA,MAAQD,EADR,EACQA,SACf,OACE,yBAAKxB,UAAU,aACX,wBAAIA,UAAU,eAAd,qBACCyB,EAAMO,KAAI,SAAClB,GACV,OACE,kBAACmB,EAAA,EAAD,CAAM7C,MAAO,CAAE8C,aAAc,QAAUC,IAAKrB,EAASC,OACnD,kBAACqB,EAAA,EAAD,CAAYxC,QAAS,EAAKyB,OAAQgB,aAAYvB,EAASC,OAAQD,EAASG,OACxE,kBAACpB,EAAA,EAAD,CAAUZ,OAAQuC,IAAaV,EAASC,OACxC,kBAACuB,EAAA,EAAD,KACCxB,EAASE,gB,GA9BJuB,aCHTC,E,uKAXP,OACR,4BAAQxC,UAAW,sBACnB,yBAAKA,UAAU,gBACf,uBAAGA,UAAU,eAAb,6C,GALqByC,IAAMF,WCkCZG,E,4MA5BbnB,MAAQ,CACNoB,UAAU,G,uDAIZ,OACE,yBAAK3C,UAAU,OACX,kBAAC4C,EAAA,EAAD,CAAYxD,MAAO,CAACyD,QAAS,MAC7B,wBAAIzD,MAAO,CAACE,MAAM,QAAUD,WAAW,WAAYW,UAAU,aAA7D,qBAEA,yBAAKZ,MAAO,CAAC0D,OAAO,QAAU9C,UAAU,OACxC,yBAAKA,UAAU,UACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,SACX,kBAAC,EAAD,QAGV,yBAAKA,UAAU,SAAQ,kBAAC,EAAD,QAEvB,8BAGA,6BAAK,kBAAC,EAAD,Y,GAvBOuC,aCEEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a0e0383.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText\r\n} from 'reactstrap';\r\n\r\nconst TopNav = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n  \r\n  return (\r\n    <div>\r\n      <Navbar style={{background:\"#2F4F4F !important\"}} color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">Office Dev</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/components/\">Introduction</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/components\">Basic Framework</NavLink>\r\n            </NavItem>\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                ToolsInformation\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                When to use a tool\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  Steps to use a tool\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>\r\n                  Reset\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav>\r\n          <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopNav;","import React from 'react';\r\nimport { Nav, NavItem, NavLink } from 'reactstrap';\r\n\r\nconst RightNav = () => {\r\n  return (\r\n    <div style={{background:\"#f8f9fa\"}}>\r\n      <p >Quick links</p>\r\n      <Nav vertical>\r\n        <NavItem>\r\n          <NavLink href=\"#\">Hotfix information</NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink href=\"#\">Suggestion box</NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink href=\"#\">Sample code</NavLink>\r\n        </NavItem>\r\n        \r\n      </Nav>\r\n      <hr />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RightNav;","import React, { Component } from 'react';\r\nimport { Collapse, CardBody, Card, CardHeader } from 'reactstrap';\r\n\r\n\r\ninterface IAccordionState{\r\n    collapse : any,\r\n    cards :  Array<carddata>\r\n\r\n}\r\n\r\nclass carddata{\r\n    index:number = 0;\r\n    data: string=\"\";\r\n    Title:string=\"\";\r\n    constructor(index:number, data: string,Title:string){\r\n        this.index = index;\r\n        this.data = data;\r\n        this.Title = Title;\r\n    }\r\n}\r\n\r\nclass Accordion extends Component<any,IAccordionState> {\r\n  constructor(props : any) {\r\n    let x: [string, number];\r\n      super(props);\r\n      this.toggle = this.toggle.bind(this);\r\n      this.state = { \r\n          collapse : 0,  \r\n           cards:[\r\n               new carddata(1,\"ProcDump is a command-line utility whose primary purpose is monitoring an application for CPU spikes and generating crash dumps during a spike that an administrator or developer can use to determine the cause of the spike. ProcDump also includes hung window monitoring (using the same definition of a window hang that Windows and Task Manager use), unhandled exception monitoring and can generate dumps based on the values of system performance counters. It also can serve as a general process dump utility that you can embed in other scripts.\",\"ProcDump\"),\r\n               new carddata(2,\"Time Travel Tracing, also called IDNA and TTT, from the Center for Software Excellence is a diagnostics infrastructure based on a model of collecting instruction level traces and then analyzing the traces offline to diagnose the failed behavior of applications.You can also read more about IDNA V2 and the current work at http://sharepoint/sites/debug/Tips/IDNA%20V2.aspx\",\"IDNA Trace\"),\r\n               new carddata(3,\"For Fiddler log collection, if your site is using https, make sure you’ve enabled the capture and decryption of https traffic: In Fiddler, go to Tools -> Options -> Https tab -> Select the check boxes ‘Capture HTTPS CONNECTs’ and ‘Decrypt HTTPS traffic’ Reproduce the issue Once the trace is captured, please save the session by going to File -> Save -> All Sessions. \",\"Fiddler Traces\"),\r\n               new carddata(4,\"check permissions, check fiddler, if everything is fine then raise MS ticket\",\"Graph issues\")]\r\n        };\r\n           \r\n    }\r\n    toggle(e : any) {\r\n      let event = e.target.dataset.event;\r\n      this.setState({ collapse: this.state.collapse === Number(event) ? 0 : Number(event) });\r\n    }\r\n    render() {\r\n      const {cards , collapse } = this.state;\r\n      return (\r\n        <div className=\"container\">\r\n            <h3 className=\"page-header\">Tools information</h3>\r\n            {cards.map((carddata: any)  => {\r\n              return (\r\n                <Card style={{ marginBottom: '1rem' }} key={carddata.index}>\r\n                  <CardHeader onClick={this.toggle} data-event={carddata.index}>{carddata.Title}</CardHeader>\r\n                  <Collapse isOpen={collapse === carddata.index}>\r\n                  <CardBody>\r\n                  {carddata.data}\r\n                  </CardBody>\r\n                  </Collapse>\r\n                </Card>\r\n              )\r\n            })}     \r\n            \r\n          </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Accordion;","import { strict } from \"assert\";\r\n\r\nimport React from 'react';\r\n\r\n\r\nclass Footer extends React.Component{\r\n    render(){\r\n        return(\r\n<footer className =\"footer text-center\">\r\n<div className=\"foocontainer\">\r\n<p className=\"footer-text\">Copyright 2020. All rights reserved</p>\r\n</div>\r\n</footer>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import React,{ Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Jumbotron, Button } from 'reactstrap';\r\nimport TopNav from './components/TopNav'\r\nimport RightNav from './components/RightNav'\r\nimport  Accordion from './components/Accordion'\r\nimport Wizard from './components/Wizard';\r\nimport Footer from './components/Footer';\r\nimport { Hidden } from '@material-ui/core';\r\nclass App extends Component {\r\n  state = {\r\n    isActive: false\r\n  };\r\n  render()\r\n  { const greeting = 'Welcome to React';\r\n  return (\r\n    <div className=\"App\">\r\n        <Jumbotron  style={{padding: \"0\"}}>\r\n        <h1 style={{color:\"White\" , background:\"#2F4F4F\"}} className=\"display-2\">Customer Compass</h1>\r\n        </Jumbotron>\r\n        <div style={{margin:\"auto\"}}  className=\"row\">\r\n        <div className=\"col-10\">\r\n            <TopNav></TopNav>\r\n            <div className=\"col-9\">\r\n                <Accordion></Accordion>\r\n            </div>\r\n        </div>\r\n      <div className=\"col-2\"><RightNav></RightNav></div>\r\n      </div> \r\n      <div>\r\n         {/* <Wizard/> */}\r\n      </div>\r\n      <div><Footer></Footer></div>\r\n    </div>\r\n  )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}